// Code generated by clickhouseanalyzer; DO NOT EDIT.
package databaseoperations

// DatabaseOperation represents a database operation from ClickHouse analysis
type DatabaseOperation struct {
	ServiceName string
	DBName      string
	DBTable     string
	Operation   string
}

// DatabaseOperations maps service names to their database operations
var DatabaseOperations = map[string][]DatabaseOperation{
	"ts-config-service": {
		{
			ServiceName: "ts-config-service",
			DBName:      "ts",
			DBTable:     "config",
			Operation:   "SELECT",
		},
	},
	"ts-train-service": {
		{
			ServiceName: "ts-train-service",
			DBName:      "ts",
			DBTable:     "train_type",
			Operation:   "SELECT",
		},
	},
	"ts-travel2-service": {
		{
			ServiceName: "ts-travel2-service",
			DBName:      "ts",
			DBTable:     "trip2",
			Operation:   "SELECT",
		},
	},
	"ts-consign-service": {
		{
			ServiceName: "ts-consign-service",
			DBName:      "ts",
			DBTable:     "consign_record",
			Operation:   "SELECT",
		},
	},
	"ts-station-food-service": {
		{
			ServiceName: "ts-station-food-service",
			DBName:      "ts",
			DBTable:     "station_food_list",
			Operation:   "SELECT",
		},
		{
			ServiceName: "ts-station-food-service",
			DBName:      "ts",
			DBTable:     "station_food_store",
			Operation:   "SELECT",
		},
	},
	"ts-security-service": {
		{
			ServiceName: "ts-security-service",
			DBName:      "ts",
			DBTable:     "security_config",
			Operation:   "SELECT",
		},
	},
	"ts-order-other-service": {
		{
			ServiceName: "ts-order-other-service",
			DBName:      "ts",
			DBTable:     "orders_other",
			Operation:   "SELECT",
		},
	},
	"ts-route-service": {
		{
			ServiceName: "ts-route-service",
			DBName:      "ts",
			DBTable:     "route",
			Operation:   "SELECT",
		},
		{
			ServiceName: "ts-route-service",
			DBName:      "ts",
			DBTable:     "route_distances",
			Operation:   "SELECT",
		},
		{
			ServiceName: "ts-route-service",
			DBName:      "ts",
			DBTable:     "route_stations",
			Operation:   "SELECT",
		},
	},
	"ts-travel-service": {
		{
			ServiceName: "ts-travel-service",
			DBName:      "ts",
			DBTable:     "trip",
			Operation:   "SELECT",
		},
	},
	"ts-train-food-service": {
		{
			ServiceName: "ts-train-food-service",
			DBName:      "ts",
			DBTable:     "train_food",
			Operation:   "SELECT",
		},
		{
			ServiceName: "ts-train-food-service",
			DBName:      "ts",
			DBTable:     "train_food_list",
			Operation:   "SELECT",
		},
	},
	"ts-auth-service": {
		{
			ServiceName: "ts-auth-service",
			DBName:      "ts",
			DBTable:     "auth_user",
			Operation:   "SELECT",
		},
		{
			ServiceName: "ts-auth-service",
			DBName:      "ts",
			DBTable:     "user_roles",
			Operation:   "SELECT",
		},
	},
	"ts-order-service": {
		{
			ServiceName: "ts-order-service",
			DBName:      "ts",
			DBTable:     "orders",
			Operation:   "SELECT",
		},
	},
	"ts-contacts-service": {
		{
			ServiceName: "ts-contacts-service",
			DBName:      "ts",
			DBTable:     "contacts",
			Operation:   "SELECT",
		},
	},
	"ts-price-service": {
		{
			ServiceName: "ts-price-service",
			DBName:      "ts",
			DBTable:     "price_config",
			Operation:   "SELECT",
		},
	},
	"ts-station-service": {
		{
			ServiceName: "ts-station-service",
			DBName:      "ts",
			DBTable:     "station",
			Operation:   "SELECT",
		},
	},
	"ts-user-service": {
		{
			ServiceName: "ts-user-service",
			DBName:      "ts",
			DBTable:     "user",
			Operation:   "SELECT",
		},
	},
}

// GetOperationsByService returns all database operations for a service
func GetOperationsByService(serviceName string) []DatabaseOperation {
	if operations, exists := DatabaseOperations[serviceName]; exists {
		return operations
	}
	return []DatabaseOperation{}
}

// GetAllDatabaseServices returns a list of all services that perform database operations
func GetAllDatabaseServices() []string {
	services := make([]string, 0, len(DatabaseOperations))
	for service := range DatabaseOperations {
		services = append(services, service)
	}
	return services
}

// GetOperationsByDatabase returns all operations for a specific database
func GetOperationsByDatabase(dbName string) []DatabaseOperation {
	var results []DatabaseOperation
	for _, operations := range DatabaseOperations {
		for _, op := range operations {
			if op.DBName == dbName {
				results = append(results, op)
			}
		}
	}
	return results
}

// GetOperationsByTable returns all operations for a specific table
func GetOperationsByTable(dbTable string) []DatabaseOperation {
	var results []DatabaseOperation
	for _, operations := range DatabaseOperations {
		for _, op := range operations {
			if op.DBTable == dbTable {
				results = append(results, op)
			}
		}
	}
	return results
}
