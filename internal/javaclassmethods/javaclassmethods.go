// Code generated by javadatagenerator.go; DO NOT EDIT.
package javaclassmethods

// ClassMethodEntry represents a class-method pair from Java analysis
type ClassMethodEntry struct {
	ClassName  string
	MethodName string
}

// ServiceClassMethods maps service names to their class-method pairs
var ServiceClassMethods = map[string][]ClassMethodEntry{
	"ts-admin-basic-info-service": {
		{ClassName: "adminbasic.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "adminbasic.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "adminbasic.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "adminbasic.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "home"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "getAllContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "deleteContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "modifyContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "addContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "getAllStations"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "deleteStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "modifyStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "addStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "getAllTrains"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "deleteTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "modifyTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "addTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "getAllConfigs"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "deleteConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "modifyConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "addConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "getAllPrices"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "deletePrice"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "modifyPrice"},
		{ClassName: "adminbasic.controller.AdminBasicInfoController", MethodName: "addPrice"},
		{ClassName: "adminbasic.AdminBasicInfoApplication", MethodName: "main"},
		{ClassName: "adminbasic.AdminBasicInfoApplication", MethodName: "restTemplate"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getAllContacts"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "deleteContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "modifyContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "addContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getAllStations"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "addStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "deleteStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "modifyStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getAllTrains"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "addTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "deleteTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "modifyTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getAllConfigs"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "addConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "deleteConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "modifyConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "getAllPrices"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "addPrice"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "deletePrice"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImpl", MethodName: "modifyPrice"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "setUp"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testHome"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testGetAllContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testDeleteContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testModifyContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testAddContacts"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testGetAllStations"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testDeleteStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testModifyStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testAddStation"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testGetAllTrains"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testDeleteTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testModifyTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testAddTrain"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testGetAllConfigs"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testDeleteConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testModifyConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testAddConfig"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testGetAllPrices"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testDeletePrice"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testModifyPrice"},
		{ClassName: "adminbasic.controller.AdminBasicInfoControllerTest", MethodName: "testAddPrice"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "setUp"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testGetAllContacts"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testDeleteContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testModifyContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testAddContact"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testGetAllStations"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testAddStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testDeleteStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testModifyStation"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testGetAllTrains"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testAddTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testDeleteTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testModifyTrain"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testGetAllConfigs"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testAddConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testDeleteConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testModifyConfig"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testGetAllPrices"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testAddPrice"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testDeletePrice"},
		{ClassName: "adminbasic.service.AdminBasicInfoServiceImplTest", MethodName: "testModifyPrice"},
	},
	"ts-auth-service": {
		{ClassName: "auth.AuthApplication", MethodName: "main"},
		{ClassName: "auth.AuthApplication", MethodName: "restTemplate"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "authenticationManager"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "configureAuthentication"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "auth.config.WebSecurityConfig", MethodName: "configure"},
		{ClassName: "auth.security.jwt.JWTProvider", MethodName: "init"},
		{ClassName: "auth.security.jwt.JWTProvider", MethodName: "createToken"},
		{ClassName: "auth.security.UserDetailsServiceImpl", MethodName: "loadUserByUsername"},
		{ClassName: "auth.controller.UserController", MethodName: "getHello"},
		{ClassName: "auth.controller.UserController", MethodName: "getToken"},
		{ClassName: "auth.controller.UserController", MethodName: "getAllUser"},
		{ClassName: "auth.controller.UserController", MethodName: "deleteUserById"},
		{ClassName: "auth.controller.AuthController", MethodName: "getHello"},
		{ClassName: "auth.controller.AuthController", MethodName: "createDefaultUser"},
		{ClassName: "auth.entity.User", MethodName: "getAuthorities"},
		{ClassName: "auth.entity.User", MethodName: "getPassword"},
		{ClassName: "auth.entity.User", MethodName: "getUsername"},
		{ClassName: "auth.entity.User", MethodName: "isAccountNonExpired"},
		{ClassName: "auth.entity.User", MethodName: "isAccountNonLocked"},
		{ClassName: "auth.entity.User", MethodName: "isCredentialsNonExpired"},
		{ClassName: "auth.entity.User", MethodName: "isEnabled"},
		{ClassName: "auth.constant.AuthConstant", MethodName: "AuthConstant"},
		{ClassName: "auth.constant.InfoConstant", MethodName: "InfoConstant"},
		{ClassName: "auth.exception.handler.GlobalExceptionHandler", MethodName: "handleUserNotFoundException"},
		{ClassName: "auth.exception.UserOperationException", MethodName: "UserOperationException"},
		{ClassName: "auth.service.impl.UserServiceImpl", MethodName: "saveUser"},
		{ClassName: "auth.service.impl.UserServiceImpl", MethodName: "getAllUser"},
		{ClassName: "auth.service.impl.UserServiceImpl", MethodName: "createDefaultAuthUser"},
		{ClassName: "auth.service.impl.UserServiceImpl", MethodName: "deleteByUserId"},
		{ClassName: "auth.service.impl.UserServiceImpl", MethodName: "checkUserCreateInfo"},
		{ClassName: "auth.service.impl.TokenServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "auth.service.impl.TokenServiceImpl", MethodName: "getToken"},
		{ClassName: "auth.init.InitUser", MethodName: "run"},
		{ClassName: "auth.controller.AuthControllerTest", MethodName: "setUp"},
		{ClassName: "auth.controller.AuthControllerTest", MethodName: "testGetHello"},
		{ClassName: "auth.controller.AuthControllerTest", MethodName: "testCreateDefaultUser"},
		{ClassName: "auth.controller.UserControllerTest", MethodName: "setUp"},
		{ClassName: "auth.controller.UserControllerTest", MethodName: "testGetHello"},
		{ClassName: "auth.controller.UserControllerTest", MethodName: "testGetToken"},
		{ClassName: "auth.controller.UserControllerTest", MethodName: "testGetAllUser"},
		{ClassName: "auth.controller.UserControllerTest", MethodName: "testDeleteUserById"},
		{ClassName: "auth.service.TokenServiceImplTest", MethodName: "setUp"},
		{ClassName: "auth.service.TokenServiceImplTest", MethodName: "testGetToken1"},
		{ClassName: "auth.service.TokenServiceImplTest", MethodName: "testGetToken2"},
		{ClassName: "auth.service.UserServiceImplTest", MethodName: "setUp"},
		{ClassName: "auth.service.UserServiceImplTest", MethodName: "testSaveUser"},
		{ClassName: "auth.service.UserServiceImplTest", MethodName: "testGetAllUser"},
		{ClassName: "auth.service.UserServiceImplTest", MethodName: "testCreateDefaultAuthUser"},
		{ClassName: "auth.service.UserServiceImplTest", MethodName: "testDeleteByUserId"},
	},
	"ts-consign-service": {
		{ClassName: "consign.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "consign.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "consign.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "consign.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "consign.controller.ConsignController", MethodName: "home"},
		{ClassName: "consign.controller.ConsignController", MethodName: "insertConsign"},
		{ClassName: "consign.controller.ConsignController", MethodName: "updateConsign"},
		{ClassName: "consign.controller.ConsignController", MethodName: "findByAccountId"},
		{ClassName: "consign.controller.ConsignController", MethodName: "findByOrderId"},
		{ClassName: "consign.controller.ConsignController", MethodName: "findByConsignee"},
		{ClassName: "consign.entity.InsertConsignRecordResult", MethodName: "InsertConsignRecordResult"},
		{ClassName: "consign.entity.GetPriceDomain", MethodName: "GetPriceDomain"},
		{ClassName: "consign.ConsignApplication", MethodName: "main"},
		{ClassName: "consign.ConsignApplication", MethodName: "restTemplate"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "insertConsignRecord"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "updateConsignRecord"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "queryByAccountId"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "queryByOrderId"},
		{ClassName: "consign.service.ConsignServiceImpl", MethodName: "queryByConsignee"},
		{ClassName: "consign.init.InitData", MethodName: "run"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "setUp"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testHome"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testInsertConsign"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testUpdateConsign"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testFindByAccountId"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testFindByOrderId"},
		{ClassName: "consign.controller.ConsignControllerTest", MethodName: "testFindByConsignee"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "setUp"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testInsertConsignRecord"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testUpdateConsignRecord1"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testUpdateConsignRecord2"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByAccountId1"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByAccountId2"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByOrderId1"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByOrderId2"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByConsignee1"},
		{ClassName: "consign.service.ConsignServiceImplTest", MethodName: "testQueryByConsignee2"},
	},
	"ts-gateway-service": {
		{ClassName: "gateway.GatewayApplication", MethodName: "main"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "GatewayConfiguration"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "sentinelGatewayBlockExceptionHandler"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "sentinelGatewayFilter"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "doInit"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "initBlockHandlers"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "requestLoggingFilter"},
		{ClassName: "gateway.GatewayConfiguration", MethodName: "initGatewayRules"},
	},
	"ts-preserve-other-service": {
		{ClassName: "preserveOther.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "preserveOther.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "preserveOther.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "preserveOther.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "preserveOther.config.Queues", MethodName: "emailQueue"},
		{ClassName: "preserveOther.controller.PreserveOtherController", MethodName: "home"},
		{ClassName: "preserveOther.controller.PreserveOtherController", MethodName: "preserve"},
		{ClassName: "preserveOther.PreserveOtherApplication", MethodName: "main"},
		{ClassName: "preserveOther.PreserveOtherApplication", MethodName: "restTemplate"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "preserve"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "dipatchSeat"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "sendEmail"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "getAccount"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "addAssuranceForOrder"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "queryForStationId"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "checkSecurity"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "getTripAllDetailInformation"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "getContactsById"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "createOrder"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "createFoodOrder"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImpl", MethodName: "createConsign"},
		{ClassName: "preserveOther.mq.RabbitSend", MethodName: "send"},
		{ClassName: "preserveOther.controller.PreserveOtherControllerTest", MethodName: "setUp"},
		{ClassName: "preserveOther.controller.PreserveOtherControllerTest", MethodName: "testHome"},
		{ClassName: "preserveOther.controller.PreserveOtherControllerTest", MethodName: "testPreserve"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImplTest", MethodName: "setUp"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImplTest", MethodName: "testPreserve"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImplTest", MethodName: "testDipatchSeat"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImplTest", MethodName: "testSendEmail"},
		{ClassName: "preserveOther.service.PreserveOtherServiceImplTest", MethodName: "testGetAccount"},
	},
	"ts-seat-service": {
		{ClassName: "seat.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "seat.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "seat.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "seat.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "seat.controller.SeatController", MethodName: "home"},
		{ClassName: "seat.controller.SeatController", MethodName: "create"},
		{ClassName: "seat.controller.SeatController", MethodName: "getLeftTicketOfInterval"},
		{ClassName: "seat.SeatApplication", MethodName: "main"},
		{ClassName: "seat.SeatApplication", MethodName: "restTemplate"},
		{ClassName: "seat.service.SeatServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "seat.service.SeatServiceImpl", MethodName: "distributeSeat"},
		{ClassName: "seat.service.SeatServiceImpl", MethodName: "isContained"},
		{ClassName: "seat.service.SeatServiceImpl", MethodName: "getLeftTicketOfInterval"},
		{ClassName: "seat.service.SeatServiceImpl", MethodName: "getDirectProportion"},
		{ClassName: "seat.controller.SeatControllerTest", MethodName: "setUp"},
		{ClassName: "seat.controller.SeatControllerTest", MethodName: "testHome"},
		{ClassName: "seat.controller.SeatControllerTest", MethodName: "testCreate"},
		{ClassName: "seat.controller.SeatControllerTest", MethodName: "testGetLeftTicketOfInterval"},
		{ClassName: "seat.service.SeatServiceImplTest", MethodName: "setUp"},
		{ClassName: "seat.service.SeatServiceImplTest", MethodName: "testDistributeSeat1"},
		{ClassName: "seat.service.SeatServiceImplTest", MethodName: "testDistributeSeat2"},
		{ClassName: "seat.service.SeatServiceImplTest", MethodName: "testGetLeftTicketOfInterval"},
		{ClassName: "seat.service.SeatServiceImplTest", MethodName: "testGetLeftTicketOfInterva2"},
	},
	"ts-travel2-service": {
		{ClassName: "travel2.Travel2Application", MethodName: "main"},
		{ClassName: "travel2.Travel2Application", MethodName: "restTemplate"},
		{ClassName: "travel2.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "travel2.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "travel2.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "travel2.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "home"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "getTrainTypeByTripId"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "getRouteByTripId"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "getTripsByRouteId"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "createTrip"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "retrieve"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "updateTrip"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "deleteTrip"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "queryInfo"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "getTripAllDetailInfo"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "queryAll"},
		{ClassName: "travel2.controller.Travel2Controller", MethodName: "adminQueryAll"},
		{ClassName: "travel2.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel2.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel2.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel2.entity.AdminTrip", MethodName: "AdminTrip"},
		{ClassName: "travel2.entity.Travel", MethodName: "Travel"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getRouteByTripId"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTrainTypeByTripId"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTripByRoute"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "create"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "retrieve"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "update"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "delete"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "queryByBatch"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "query"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTripAllDetailInfo"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTicketsByBatch"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTickets"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "setResponse"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "queryAll"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "afterToday"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getTrainTypeByName"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getRouteByRouteId"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "getRestTicketNumber"},
		{ClassName: "travel2.service.TravelServiceImpl", MethodName: "adminQueryAll"},
		{ClassName: "travel2.init.InitData", MethodName: "run"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "setUp"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testHome"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testGetTrainTypeByTripId"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testGetRouteByTripId"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testGetTripsByRouteId"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testCreateTrip"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testRetrieve"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testUpdateTrip"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testDeleteTrip"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testQueryInfo1"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testQueryInfo2"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testGetTripAllDetailInfo"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testQueryAll"},
		{ClassName: "travel2.controller.TravelControllerTest", MethodName: "testAdminQueryAll"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "setUp"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetRouteByTripId1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetRouteByTripId2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetTrainTypeByTripId"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetTripByRoute1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetTripByRoute2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testRetrieve1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testRetrieve2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testUpdate1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testUpdate2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testQuery"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testGetTripAllDetailInfo"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testQueryAll1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testQueryAll2"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testAdminQueryAll1"},
		{ClassName: "travel2.service.TravelServiceImplTest", MethodName: "testAdminQueryAll2"},
	},
	"ts-admin-order-service": {
		{ClassName: "adminorder.AdminOrderApplication", MethodName: "main"},
		{ClassName: "adminorder.AdminOrderApplication", MethodName: "restTemplate"},
		{ClassName: "adminorder.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "adminorder.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "adminorder.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "adminorder.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "adminorder.controller.AdminOrderController", MethodName: "home"},
		{ClassName: "adminorder.controller.AdminOrderController", MethodName: "getAllOrders"},
		{ClassName: "adminorder.controller.AdminOrderController", MethodName: "addOrder"},
		{ClassName: "adminorder.controller.AdminOrderController", MethodName: "updateOrder"},
		{ClassName: "adminorder.controller.AdminOrderController", MethodName: "deleteOrder"},
		{ClassName: "adminorder.service.AdminOrderServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "adminorder.service.AdminOrderServiceImpl", MethodName: "getAllOrders"},
		{ClassName: "adminorder.service.AdminOrderServiceImpl", MethodName: "deleteOrder"},
		{ClassName: "adminorder.service.AdminOrderServiceImpl", MethodName: "updateOrder"},
		{ClassName: "adminorder.service.AdminOrderServiceImpl", MethodName: "addOrder"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "setUp"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "testHome"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "testGetAllOrders"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "testAddOrder"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "testUpdateOrder"},
		{ClassName: "adminorder.controller.AdminOrderControllerTest", MethodName: "testDeleteOrder"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "setUp"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testGetAllOrders1"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testGetAllOrders2"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testDeleteOrder1"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testDeleteOrder2"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testUpdateOrder1"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testUpdateOrder2"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testAddOrder1"},
		{ClassName: "adminorder.service.AdminOrderServiceImplTest", MethodName: "testAddOrder2"},
	},
	"ts-basic-service": {
		{ClassName: "fdse.microservice.BasicApplication", MethodName: "main"},
		{ClassName: "fdse.microservice.BasicApplication", MethodName: "restTemplate"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "fdse.microservice.controller.BasicController", MethodName: "home"},
		{ClassName: "fdse.microservice.controller.BasicController", MethodName: "queryForTravel"},
		{ClassName: "fdse.microservice.controller.BasicController", MethodName: "queryForTravels"},
		{ClassName: "fdse.microservice.controller.BasicController", MethodName: "queryForStationId"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryForTravel"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryForTravels"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryForStationId"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "checkStationsExists"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "checkStationExists"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryTrainTypeByNames"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryTrainTypeByName"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "getRoutesByRouteIds"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "getRouteByRouteId"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryPriceConfigByRouteIdAndTrainType"},
		{ClassName: "fdse.microservice.service.BasicServiceImpl", MethodName: "queryPriceConfigByRouteIdsAndTrainTypes"},
		{ClassName: "fdse.microservice.controller.BasicControllerTest", MethodName: "setUp"},
		{ClassName: "fdse.microservice.controller.BasicControllerTest", MethodName: "testHome"},
		{ClassName: "fdse.microservice.controller.BasicControllerTest", MethodName: "testQueryForTravel"},
		{ClassName: "fdse.microservice.controller.BasicControllerTest", MethodName: "testQueryForStationId"},
		{ClassName: "fdse.microservice.service.BasicServiceImplTest", MethodName: "setUp"},
		{ClassName: "fdse.microservice.service.BasicServiceImplTest", MethodName: "testQueryForTravel"},
		{ClassName: "fdse.microservice.service.BasicServiceImplTest", MethodName: "testQueryForStationId"},
		{ClassName: "fdse.microservice.service.BasicServiceImplTest", MethodName: "testCheckStationExists"},
		{ClassName: "fdse.microservice.service.BasicServiceImplTest", MethodName: "testQueryTrainType"},
	},
	"ts-contacts-service": {
		{ClassName: "contacts.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "contacts.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "contacts.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "contacts.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "home"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "getAllContacts"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "createNewContacts"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "createNewContactsAdmin"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "deleteContacts"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "modifyContacts"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "findContactsByAccountId"},
		{ClassName: "contacts.controller.ContactsController", MethodName: "getContactsByContactsId"},
		{ClassName: "contacts.entity.Contacts", MethodName: "Contacts"},
		{ClassName: "contacts.entity.Contacts", MethodName: "equals"},
		{ClassName: "contacts.entity.Contacts", MethodName: "hashCode"},
		{ClassName: "contacts.ContactsApplication", MethodName: "main"},
		{ClassName: "contacts.ContactsApplication", MethodName: "restTemplate"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "findContactsById"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "findContactsByAccountId"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "createContacts"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "create"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "delete"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "modify"},
		{ClassName: "contacts.service.ContactsServiceImpl", MethodName: "getAllContacts"},
		{ClassName: "contacts.init.InitData", MethodName: "run"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "setUp"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testHome"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testGetAllContacts"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testCreateNewContacts"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testCreateNewContactsAdmin"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testDeleteContacts"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testModifyContacts"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testFindContactsByAccountId"},
		{ClassName: "contacts.controller.ContactsControllerTest", MethodName: "testGetContactsByContactsId"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "setUp"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testFindContactsById1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testFindContactsById2"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testFindContactsByAccountId"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testCreateContacts1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testCreateContacts2"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testModify1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testModify2"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testGetAllContacts1"},
		{ClassName: "contacts.service.ContactsServiceImplTest", MethodName: "testGetAllContacts2"},
	},
	"ts-inside-payment-service": {
		{ClassName: "inside_payment.util.CookieUtil", MethodName: "CookieUtil"},
		{ClassName: "inside_payment.util.CookieUtil", MethodName: "addCookie"},
		{ClassName: "inside_payment.util.CookieUtil", MethodName: "getCookieByName"},
		{ClassName: "inside_payment.util.CookieUtil", MethodName: "readCookieMap"},
		{ClassName: "inside_payment.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "inside_payment.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "inside_payment.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "inside_payment.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "inside_payment.async.AsyncTask", MethodName: "sendAsyncCallToPaymentService"},
		{ClassName: "inside_payment.async.ExecutorConfig", MethodName: "mySimpleAsync"},
		{ClassName: "inside_payment.async.ExecutorConfig", MethodName: "myAsync"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "home"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "pay"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "createAccount"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "addMoney"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "queryPayment"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "queryAccount"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "drawBack"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "payDifference"},
		{ClassName: "inside_payment.controller.InsidePaymentController", MethodName: "queryAddMoney"},
		{ClassName: "inside_payment.entity.OutsidePaymentInfo", MethodName: "OutsidePaymentInfo"},
		{ClassName: "inside_payment.entity.Payment", MethodName: "Payment"},
		{ClassName: "inside_payment.entity.Balance", MethodName: "Balance"},
		{ClassName: "inside_payment.entity.Money", MethodName: "Money"},
		{ClassName: "inside_payment.entity.AccountInfo", MethodName: "AccountInfo"},
		{ClassName: "inside_payment.entity.PaymentInfo", MethodName: "PaymentInfo"},
		{ClassName: "inside_payment.InsidePaymentApplication", MethodName: "main"},
		{ClassName: "inside_payment.InsidePaymentApplication", MethodName: "restTemplate"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "pay"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "createAccount"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "addMoney"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "queryAccount"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "queryAccount"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "queryPayment"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "drawBack"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "payDifference"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "queryAddMoney"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "setOrderStatus"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImpl", MethodName: "initPayment"},
		{ClassName: "inside_payment.init.InitData", MethodName: "run"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "setUp"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testHome"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testPay"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testCreateAccount"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testAddMoney"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testQueryPayment"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testQueryAccount"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testDrawBack"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testPayDifference"},
		{ClassName: "inside_payment.controller.InsidePaymentControllerTest", MethodName: "testQueryAddMoney"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "setUp"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testPay"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testCreateAccount1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testCreateAccount2"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testAddMoney1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testAddMoney2"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testQueryAccount"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testQueryPayment1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testQueryPayment2"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testDrawBack1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testDrawBack2"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testPayDifference"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testQueryAddMoney1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testQueryAddMoney2"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testInitPayment1"},
		{ClassName: "inside_payment.service.InsidePaymentServiceImplTest", MethodName: "testInitPayment2"},
	},
	"ts-preserve-service": {
		{ClassName: "preserve.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "preserve.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "preserve.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "preserve.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "preserve.config.Queues", MethodName: "emailQueue"},
		{ClassName: "preserve.controller.PreserveController", MethodName: "home"},
		{ClassName: "preserve.controller.PreserveController", MethodName: "preserve"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "preserve"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "dipatchSeat"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "sendEmail"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "getAccount"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "addAssuranceForOrder"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "queryForStationId"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "checkSecurity"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "getTripAllDetailInformation"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "getContactsById"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "createOrder"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "createFoodOrder"},
		{ClassName: "preserve.service.PreserveServiceImpl", MethodName: "createConsign"},
		{ClassName: "preserve.mq.RabbitSend", MethodName: "send"},
		{ClassName: "preserve.PreserveApplication", MethodName: "main"},
		{ClassName: "preserve.PreserveApplication", MethodName: "restTemplate"},
		{ClassName: "preserve.controller.PreserveControllerTest", MethodName: "setUp"},
		{ClassName: "preserve.controller.PreserveControllerTest", MethodName: "testHome"},
		{ClassName: "preserve.controller.PreserveControllerTest", MethodName: "testPreserve"},
		{ClassName: "preserve.service.PreserveServiceImplTest", MethodName: "setUp"},
		{ClassName: "preserve.service.PreserveServiceImplTest", MethodName: "testPreserve"},
		{ClassName: "preserve.service.PreserveServiceImplTest", MethodName: "testDipatchSeat"},
		{ClassName: "preserve.service.PreserveServiceImplTest", MethodName: "testSendEmail"},
		{ClassName: "preserve.service.PreserveServiceImplTest", MethodName: "testGetAccount"},
	},
	"ts-security-service": {
		{ClassName: "security.SecurityApplication", MethodName: "main"},
		{ClassName: "security.SecurityApplication", MethodName: "restTemplate"},
		{ClassName: "security.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "security.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "security.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "security.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "security.controller.SecurityController", MethodName: "home"},
		{ClassName: "security.controller.SecurityController", MethodName: "findAllSecurityConfig"},
		{ClassName: "security.controller.SecurityController", MethodName: "create"},
		{ClassName: "security.controller.SecurityController", MethodName: "update"},
		{ClassName: "security.controller.SecurityController", MethodName: "delete"},
		{ClassName: "security.controller.SecurityController", MethodName: "check"},
		{ClassName: "security.entity.SecurityConfig", MethodName: "SecurityConfig"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "findAllSecurityConfig"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "addNewSecurityConfig"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "modifySecurityConfig"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "deleteSecurityConfig"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "check"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "getSecurityOrderInfoFromOrder"},
		{ClassName: "security.service.SecurityServiceImpl", MethodName: "getSecurityOrderOtherInfoFromOrder"},
		{ClassName: "security.init.InitData", MethodName: "run"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "setUp"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testHome"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testFindAllSecurityConfig"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testCreate"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testUpdate"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testDelete"},
		{ClassName: "security.controller.SecurityControllerTest", MethodName: "testCheck"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "setUp"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testFindAllSecurityConfig1"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testFindAllSecurityConfig2"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testAddNewSecurityConfig1"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testAddNewSecurityConfig2"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testModifySecurityConfig1"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testModifySecurityConfig2"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testDeleteSecurityConfig1"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testDeleteSecurityConfig2"},
		{ClassName: "security.service.SecurityServiceImplTest", MethodName: "testCheck"},
	},
	"ts-travel-plan-service": {
		{ClassName: "travelplan.TravelPlanApplication", MethodName: "main"},
		{ClassName: "travelplan.TravelPlanApplication", MethodName: "restTemplate"},
		{ClassName: "travelplan.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "travelplan.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "travelplan.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "travelplan.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "travelplan.controller.TravelPlanController", MethodName: "home"},
		{ClassName: "travelplan.controller.TravelPlanController", MethodName: "getTransferResult"},
		{ClassName: "travelplan.controller.TravelPlanController", MethodName: "getByCheapest"},
		{ClassName: "travelplan.controller.TravelPlanController", MethodName: "getByQuickest"},
		{ClassName: "travelplan.controller.TravelPlanController", MethodName: "getByMinStation"},
		{ClassName: "travelplan.entity.TransferTravelResult", MethodName: "TransferTravelResult"},
		{ClassName: "travelplan.entity.TransferTravelResult", MethodName: "TransferTravelResult"},
		{ClassName: "travelplan.entity.TravelAdvanceResultUnit", MethodName: "TravelAdvanceResultUnit"},
		{ClassName: "travelplan.entity.TransferTravelInfo", MethodName: "TransferTravelInfo"},
		{ClassName: "travelplan.entity.TransferTravelInfo", MethodName: "TransferTravelInfo"},
		{ClassName: "travelplan.entity.TransferTravelInfo", MethodName: "getTravelDate"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getTransferSearch"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getCheapest"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getQuickest"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getMinStation"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getRestTicketNumber"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getRoutePlanResultCheapest"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getRoutePlanResultQuickest"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "getRoutePlanResultMinStation"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "tripsFromHighSpeed"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "tripsFromNormal"},
		{ClassName: "travelplan.service.TravelPlanServiceImpl", MethodName: "queryTrainTypeByName"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "setUp"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "testHome"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "testGetTransferResult"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "testGetByCheapest"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "testGetByQuickest"},
		{ClassName: "travelplan.controller.TravelPlanControllerTest", MethodName: "testGetByMinStation"},
		{ClassName: "travelplan.service.TravelPlanServiceImplTest", MethodName: "setUp"},
		{ClassName: "travelplan.service.TravelPlanServiceImplTest", MethodName: "testGetTransferSearch"},
		{ClassName: "travelplan.service.TravelPlanServiceImplTest", MethodName: "testGetCheapest"},
		{ClassName: "travelplan.service.TravelPlanServiceImplTest", MethodName: "testGetQuickest"},
		{ClassName: "travelplan.service.TravelPlanServiceImplTest", MethodName: "testGetMinStation"},
	},
	"ts-admin-route-service": {
		{ClassName: "adminroute.AdminRouteApplication", MethodName: "main"},
		{ClassName: "adminroute.AdminRouteApplication", MethodName: "restTemplate"},
		{ClassName: "adminroute.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "adminroute.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "adminroute.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "adminroute.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "adminroute.controller.AdminRouteController", MethodName: "home"},
		{ClassName: "adminroute.controller.AdminRouteController", MethodName: "getAllRoutes"},
		{ClassName: "adminroute.controller.AdminRouteController", MethodName: "addRoute"},
		{ClassName: "adminroute.controller.AdminRouteController", MethodName: "deleteRoute"},
		{ClassName: "adminroute.service.AdminRouteServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "adminroute.service.AdminRouteServiceImpl", MethodName: "getAllRoutes"},
		{ClassName: "adminroute.service.AdminRouteServiceImpl", MethodName: "createAndModifyRoute"},
		{ClassName: "adminroute.service.AdminRouteServiceImpl", MethodName: "deleteRoute"},
		{ClassName: "adminroute.service.AdminRouteServiceImpl", MethodName: "checkStationsExists"},
		{ClassName: "adminroute.controller.AdminRouteControllerTest", MethodName: "setUp"},
		{ClassName: "adminroute.controller.AdminRouteControllerTest", MethodName: "testHome"},
		{ClassName: "adminroute.controller.AdminRouteControllerTest", MethodName: "testGetAllRoutes"},
		{ClassName: "adminroute.controller.AdminRouteControllerTest", MethodName: "testAddRoute"},
		{ClassName: "adminroute.controller.AdminRouteControllerTest", MethodName: "testDeleteRoute"},
		{ClassName: "adminroute.service.AdminRouteServiceImplTest", MethodName: "setUp"},
		{ClassName: "adminroute.service.AdminRouteServiceImplTest", MethodName: "testGetAllRoutes"},
		{ClassName: "adminroute.service.AdminRouteServiceImplTest", MethodName: "testCreateAndModifyRoute"},
		{ClassName: "adminroute.service.AdminRouteServiceImplTest", MethodName: "testDeleteRoute"},
	},
	"ts-cancel-service": {
		{ClassName: "cancel.CancelApplication", MethodName: "main"},
		{ClassName: "cancel.CancelApplication", MethodName: "restTemplate"},
		{ClassName: "cancel.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "cancel.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "cancel.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "cancel.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "cancel.controller.CancelController", MethodName: "home"},
		{ClassName: "cancel.controller.CancelController", MethodName: "calculate"},
		{ClassName: "cancel.controller.CancelController", MethodName: "cancelTicket"},
		{ClassName: "cancel.entity.GetAccountByIdInfo", MethodName: "GetAccountByIdInfo"},
		{ClassName: "cancel.entity.GetAccountByIdResult", MethodName: "GetAccountByIdResult"},
		{ClassName: "cancel.entity.GetOrderByIdInfo", MethodName: "GetOrderByIdInfo"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "cancelOrder"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "sendEmail"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "calculateRefund"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "calculateRefund"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "cancelFromOrder"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "getAuthorizationHeadersFrom"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "cancelFromOtherOrder"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "drawbackMoney"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "getAccount"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "getOrderByIdFromOrder"},
		{ClassName: "cancel.service.CancelServiceImpl", MethodName: "getOrderByIdFromOrderOther"},
		{ClassName: "cancel.controller.CancelControllerTest", MethodName: "setUp"},
		{ClassName: "cancel.controller.CancelControllerTest", MethodName: "testHome"},
		{ClassName: "cancel.controller.CancelControllerTest", MethodName: "testCalculate"},
		{ClassName: "cancel.controller.CancelControllerTest", MethodName: "testCancelTicket"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "setUp"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testCancelOrder1"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testCancelOrder2"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testSendEmail"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testCalculateRefund1"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testCalculateRefund2"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testDrawbackMoney"},
		{ClassName: "cancel.service.CancelServiceImplTest", MethodName: "testGetAccount"},
	},
	"ts-delivery-service": {
		{ClassName: "delivery.config.Queues", MethodName: "emailQueue"},
		{ClassName: "delivery.entity.Delivery", MethodName: "Delivery"},
		{ClassName: "delivery.DeliveryApplication", MethodName: "main"},
		{ClassName: "delivery.DeliveryApplication", MethodName: "restTemplate"},
		{ClassName: "delivery.mq.RabbitReceive", MethodName: "process"},
	},
	"ts-notification-service": {
		{ClassName: "notification.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "notification.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "notification.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "notification.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "notification.config.EmailProperties", MethodName: "setHost"},
		{ClassName: "notification.config.EmailProperties", MethodName: "getHost"},
		{ClassName: "notification.config.EmailProperties", MethodName: "setPort"},
		{ClassName: "notification.config.EmailProperties", MethodName: "getPort"},
		{ClassName: "notification.config.EmailProperties", MethodName: "setUsername"},
		{ClassName: "notification.config.EmailProperties", MethodName: "getUsername"},
		{ClassName: "notification.config.EmailProperties", MethodName: "setPassword"},
		{ClassName: "notification.config.EmailProperties", MethodName: "getPassword"},
		{ClassName: "notification.config.Queues", MethodName: "emailQueue"},
		{ClassName: "notification.controller.NotificationController", MethodName: "home"},
		{ClassName: "notification.controller.NotificationController", MethodName: "test_send"},
		{ClassName: "notification.controller.NotificationController", MethodName: "test_send_mail"},
		{ClassName: "notification.controller.NotificationController", MethodName: "preserve_success"},
		{ClassName: "notification.controller.NotificationController", MethodName: "order_create_success"},
		{ClassName: "notification.controller.NotificationController", MethodName: "order_changed_success"},
		{ClassName: "notification.controller.NotificationController", MethodName: "order_cancel_success"},
		{ClassName: "notification.entity.Mail", MethodName: "Mail"},
		{ClassName: "notification.entity.NotifyInfo", MethodName: "NotifyInfo"},
		{ClassName: "notification.service.NotificationServiceImpl", MethodName: "preserveSuccess"},
		{ClassName: "notification.service.NotificationServiceImpl", MethodName: "orderCreateSuccess"},
		{ClassName: "notification.service.NotificationServiceImpl", MethodName: "orderChangedSuccess"},
		{ClassName: "notification.service.NotificationServiceImpl", MethodName: "orderCancelSuccess"},
		{ClassName: "notification.service.MailService", MethodName: "sendEmail"},
		{ClassName: "notification.NotificationApplication", MethodName: "main"},
		{ClassName: "notification.NotificationApplication", MethodName: "restTemplate"},
		{ClassName: "notification.mq.RabbitSend", MethodName: "send"},
		{ClassName: "notification.mq.RabbitReceive", MethodName: "process"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "setUp"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "testHome"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "testPreserveSuccess"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "testOrderCreateSuccess"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "testOrderChangedSuccess"},
		{ClassName: "notification.controller.NotificationControllerTest", MethodName: "testOrderCancelSuccess"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "setUp"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testPreserveSuccess1"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testPreserveSuccess2"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderCreateSuccess1"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderCreateSuccess2"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderChangedSuccess1"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderChangedSuccess2"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderCancelSuccess1"},
		{ClassName: "notification.service.NotificationServiceImplTest", MethodName: "testOrderCancelSuccess2"},
	},
	"ts-price-service": {
		{ClassName: "price.PriceApplication", MethodName: "main"},
		{ClassName: "price.PriceApplication", MethodName: "restTemplate"},
		{ClassName: "price.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "price.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "price.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "price.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "price.controller.PriceController", MethodName: "home"},
		{ClassName: "price.controller.PriceController", MethodName: "query"},
		{ClassName: "price.controller.PriceController", MethodName: "query"},
		{ClassName: "price.controller.PriceController", MethodName: "queryAll"},
		{ClassName: "price.controller.PriceController", MethodName: "create"},
		{ClassName: "price.controller.PriceController", MethodName: "delete"},
		{ClassName: "price.controller.PriceController", MethodName: "update"},
		{ClassName: "price.entity.PriceConfig", MethodName: "PriceConfig"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "createNewPriceConfig"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "findById"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "findByRouteIdAndTrainType"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "findByRouteIdsAndTrainTypes"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "findAllPriceConfig"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "deletePriceConfig"},
		{ClassName: "price.service.PriceServiceImpl", MethodName: "updatePriceConfig"},
		{ClassName: "price.init.InitData", MethodName: "run"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "setUp"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testHome"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testQuery"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testQueryAll"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testCreate"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testDelete"},
		{ClassName: "price.controller.PriceControllerTest", MethodName: "testUpdate"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "setUp"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testCreateNewPriceConfig1"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testCreateNewPriceConfig2"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testFindById"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testFindByRouteIdAndTrainType1"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testFindByRouteIdAndTrainType2"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testFindAllPriceConfig1"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testFindAllPriceConfig2"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testDeletePriceConfig1"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testDeletePriceConfig2"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testUpdatePriceConfig1"},
		{ClassName: "price.service.PriceServiceImplTest", MethodName: "testUpdatePriceConfig2"},
	},
	"ts-station-food-service": {
		{ClassName: "food.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "food.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "food.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "food.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "food.StationFoodApplication", MethodName: "main"},
		{ClassName: "food.StationFoodApplication", MethodName: "restTemplate"},
		{ClassName: "food.controller.StationFoodController", MethodName: "home"},
		{ClassName: "food.controller.StationFoodController", MethodName: "getAllFoodStores"},
		{ClassName: "food.controller.StationFoodController", MethodName: "getFoodStoresOfStation"},
		{ClassName: "food.controller.StationFoodController", MethodName: "getFoodStoresByStationNames"},
		{ClassName: "food.controller.StationFoodController", MethodName: "getFoodListByStationFoodStoreId"},
		{ClassName: "food.entity.StationFoodStore", MethodName: "StationFoodStore"},
		{ClassName: "food.service.StationFoodServiceImpl", MethodName: "createFoodStore"},
		{ClassName: "food.service.StationFoodServiceImpl", MethodName: "listFoodStores"},
		{ClassName: "food.service.StationFoodServiceImpl", MethodName: "listFoodStoresByStationName"},
		{ClassName: "food.service.StationFoodServiceImpl", MethodName: "getFoodStoresByStationNames"},
		{ClassName: "food.service.StationFoodServiceImpl", MethodName: "getStaionFoodStoreById"},
		{ClassName: "food.init.InitData", MethodName: "run"},
		{ClassName: "food.init.InitData", MethodName: "toFoodList"},
		{ClassName: "food.controller.StationFoodControllerTest", MethodName: "setUp"},
		{ClassName: "food.controller.StationFoodControllerTest", MethodName: "testHome"},
		{ClassName: "food.controller.StationFoodControllerTest", MethodName: "testGetAllFoodStores"},
		{ClassName: "food.controller.StationFoodControllerTest", MethodName: "testGetFoodStoresOfStation"},
		{ClassName: "food.controller.StationFoodControllerTest", MethodName: "testGetFoodStoresByStationNames"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "setUp"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testCreateFoodStore1"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testCreateFoodStore2"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testListFoodStores1"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testListFoodStores2"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testListFoodStoresByStationName1"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testListFoodStoresByStationName2"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testGetFoodStoresByStationNames1"},
		{ClassName: "food.service.StationFoodServiceImplTest", MethodName: "testGetFoodStoresByStationNames2"},
	},
	"ts-travel-service": {
		{ClassName: "travel.TravelApplication", MethodName: "main"},
		{ClassName: "travel.TravelApplication", MethodName: "restTemplate"},
		{ClassName: "travel.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "travel.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "travel.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "travel.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "travel.controller.TravelController", MethodName: "home"},
		{ClassName: "travel.controller.TravelController", MethodName: "getTrainTypeByTripId"},
		{ClassName: "travel.controller.TravelController", MethodName: "getRouteByTripId"},
		{ClassName: "travel.controller.TravelController", MethodName: "getTripsByRouteId"},
		{ClassName: "travel.controller.TravelController", MethodName: "createTrip"},
		{ClassName: "travel.controller.TravelController", MethodName: "retrieve"},
		{ClassName: "travel.controller.TravelController", MethodName: "updateTrip"},
		{ClassName: "travel.controller.TravelController", MethodName: "deleteTrip"},
		{ClassName: "travel.controller.TravelController", MethodName: "queryInfo"},
		{ClassName: "travel.controller.TravelController", MethodName: "queryInfoInparallel"},
		{ClassName: "travel.controller.TravelController", MethodName: "getTripAllDetailInfo"},
		{ClassName: "travel.controller.TravelController", MethodName: "queryAll"},
		{ClassName: "travel.controller.TravelController", MethodName: "adminQueryAll"},
		{ClassName: "travel.entity.TripAllDetail", MethodName: "TripAllDetail"},
		{ClassName: "travel.entity.TripAllDetail", MethodName: "TripAllDetail"},
		{ClassName: "travel.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel.entity.Trip", MethodName: "Trip"},
		{ClassName: "travel.entity.AdminTrip", MethodName: "AdminTrip"},
		{ClassName: "travel.entity.Travel", MethodName: "Travel"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "create"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "getRouteByTripId"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "getTrainTypeByTripId"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "getTripByRoute"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "retrieve"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "update"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "delete"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "query"},
		{ClassName: "travel.service.TravelServiceImpl", MethodName: "queryByBatch"},
		{ClassName: "travel.service.MyCallable", MethodName: "MyCallable"},
		{ClassName: "travel.service.MyCallable", MethodName: "call"},
		{ClassName: "travel.service.MyCallable", MethodName: "queryInParallel"},
		{ClassName: "travel.service.MyCallable", MethodName: "getTripAllDetailInfo"},
		{ClassName: "travel.service.MyCallable", MethodName: "getTicketsByBatch"},
		{ClassName: "travel.service.MyCallable", MethodName: "getTickets"},
		{ClassName: "travel.service.MyCallable", MethodName: "setResponse"},
		{ClassName: "travel.service.MyCallable", MethodName: "queryAll"},
		{ClassName: "travel.service.MyCallable", MethodName: "afterToday"},
		{ClassName: "travel.service.MyCallable", MethodName: "getTrainTypeByName"},
		{ClassName: "travel.service.MyCallable", MethodName: "getRouteByRouteId"},
		{ClassName: "travel.service.MyCallable", MethodName: "getRestTicketNumber"},
		{ClassName: "travel.service.MyCallable", MethodName: "adminQueryAll"},
		{ClassName: "travel.init.InitData", MethodName: "run"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "setUp"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testHome"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testGetTrainTypeByTripId"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testGetRouteByTripId"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testGetTripsByRouteId"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testCreateTrip"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testRetrieve"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testUpdateTrip"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testDeleteTrip"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testQueryInfo1"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testQueryInfo2"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testGetTripAllDetailInfo"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testQueryAll"},
		{ClassName: "travel.controller.TravelControllerTest", MethodName: "testAdminQueryAll"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "setUp"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetRouteByTripId1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetRouteByTripId2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetTrainTypeByTripId"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetTripByRoute1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetTripByRoute2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testRetrieve1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testRetrieve2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testUpdate1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testUpdate2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testQuery"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testGetTripAllDetailInfo"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testQueryAll1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testQueryAll2"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testAdminQueryAll1"},
		{ClassName: "travel.service.TravelServiceImplTest", MethodName: "testAdminQueryAll2"},
	},
	"ts-admin-travel-service": {
		{ClassName: "admintravel.AdminTravelApplication", MethodName: "main"},
		{ClassName: "admintravel.AdminTravelApplication", MethodName: "restTemplate"},
		{ClassName: "admintravel.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "admintravel.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "admintravel.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "admintravel.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "admintravel.controller.AdminTravelController", MethodName: "home"},
		{ClassName: "admintravel.controller.AdminTravelController", MethodName: "getAllTravels"},
		{ClassName: "admintravel.controller.AdminTravelController", MethodName: "addTravel"},
		{ClassName: "admintravel.controller.AdminTravelController", MethodName: "updateTravel"},
		{ClassName: "admintravel.controller.AdminTravelController", MethodName: "deleteTravel"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "getAllTravels"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "addTravel"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "updateTravel"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "deleteTravel"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "checkTravelInfo"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "checkStationsExists"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "queryTrainTypeByName"},
		{ClassName: "admintravel.service.AdminTravelServiceImpl", MethodName: "getRouteByRouteId"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "setUp"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "testHome"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "testGetAllTravels"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "testAddTravel"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "testUpdateTravel"},
		{ClassName: "admintravel.controller.AdminTravelControllerTest", MethodName: "testDeleteTravel"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "setUp"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testGetAllTravels1"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testGetAllTravels2"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testAddTravel1"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testAddTravel2"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testAddTravel3"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testAddTravel4"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testUpdateTravel1"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testUpdateTravel2"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testDeleteTravel1"},
		{ClassName: "admintravel.service.AdminTravelServiceImplTest", MethodName: "testDeleteTravel2"},
	},
	"ts-common": {
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "JsonUtils"},
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "object2Json"},
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "object2Map"},
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "jsonToMap"},
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "json2Object"},
		{ClassName: "edu.fudan.common.util.JsonUtils", MethodName: "conveterObject"},
		{ClassName: "edu.fudan.common.util.StringUtils", MethodName: "String2Lower"},
		{ClassName: "edu.fudan.common.util.StringUtils", MethodName: "String2Date"},
		{ClassName: "edu.fudan.common.util.StringUtils", MethodName: "Date2String"},
		{ClassName: "edu.fudan.common.config.SwaggerConfig", MethodName: "createRestApi"},
		{ClassName: "edu.fudan.common.config.SwaggerConfig", MethodName: "apiInfo"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "JWTUtil"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getJWTAuthentication"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getAuthorities"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getPassword"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getUsername"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "isAccountNonExpired"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "isAccountNonLocked"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "isCredentialsNonExpired"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "isEnabled"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getUserName"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getRole"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getTokenFromHeader"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "validateToken"},
		{ClassName: "edu.fudan.common.security.jwt.JWTUtil", MethodName: "getClaims"},
		{ClassName: "edu.fudan.common.security.jwt.JWTFilter", MethodName: "doFilterInternal"},
		{ClassName: "edu.fudan.common.entity.TripInfo", MethodName: "TripInfo"},
		{ClassName: "edu.fudan.common.entity.TripInfo", MethodName: "getStartPlace"},
		{ClassName: "edu.fudan.common.entity.TripInfo", MethodName: "getEndPlace"},
		{ClassName: "edu.fudan.common.entity.FoodOrder", MethodName: "FoodOrder"},
		{ClassName: "edu.fudan.common.entity.StationFoodStore", MethodName: "StationFoodStore"},
		{ClassName: "edu.fudan.common.entity.LeftTicketInfo", MethodName: "LeftTicketInfo"},
		{ClassName: "edu.fudan.common.entity.LeftTicketInfo", MethodName: "toString"},
		{ClassName: "edu.fudan.common.entity.OrderTicketsInfo", MethodName: "getFrom"},
		{ClassName: "edu.fudan.common.entity.OrderTicketsInfo", MethodName: "getTo"},
		{ClassName: "rebook.entity.VerifyResult", MethodName: "VerifyResult"},
		{ClassName: "edu.fudan.common.entity.TripId", MethodName: "TripId"},
		{ClassName: "edu.fudan.common.entity.TripId", MethodName: "TripId"},
		{ClassName: "edu.fudan.common.entity.TripId", MethodName: "toString"},
		{ClassName: "edu.fudan.common.entity.SoldTicket", MethodName: "SoldTicket"},
		{ClassName: "edu.fudan.common.entity.TripResponse", MethodName: "TripResponse"},
		{ClassName: "edu.fudan.common.entity.Account", MethodName: "Account"},
		{ClassName: "edu.fudan.common.entity.Trip", MethodName: "Trip"},
		{ClassName: "edu.fudan.common.entity.Trip", MethodName: "Trip"},
		{ClassName: "edu.fudan.common.entity.Trip", MethodName: "Trip"},
		{ClassName: "edu.fudan.common.entity.Contacts", MethodName: "equals"},
		{ClassName: "edu.fudan.common.entity.Contacts", MethodName: "hashCode"},
		{ClassName: "edu.fudan.common.entity.TrainFood", MethodName: "TrainFood"},
		{ClassName: "edu.fudan.common.entity.TravelResult", MethodName: "TravelResult"},
		{ClassName: "edu.fudan.common.entity.TravelResult", MethodName: "isStatus"},
		{ClassName: "edu.fudan.common.entity.Order", MethodName: "Order"},
		{ClassName: "edu.fudan.common.entity.Order", MethodName: "equals"},
		{ClassName: "edu.fudan.common.entity.Order", MethodName: "hashCode"},
		{ClassName: "edu.fudan.common.entity.AdminTrip", MethodName: "AdminTrip"},
		{ClassName: "edu.fudan.common.entity.Travel", MethodName: "Travel"},
		{ClassName: "edu.fudan.common.entity.Ticket", MethodName: "Ticket"},
		{ClassName: "edu.fudan.common.entity.Ticket", MethodName: "Ticket"},
		{ClassName: "edu.fudan.common.entity.PriceConfig", MethodName: "PriceConfig"},
		{ClassName: "edu.fudan.common.entity.TripAllDetailInfo", MethodName: "TripAllDetailInfo"},
		{ClassName: "edu.fudan.common.entity.TripAllDetailInfo", MethodName: "getFrom"},
		{ClassName: "edu.fudan.common.entity.TripAllDetailInfo", MethodName: "getTo"},
		{ClassName: "edu.fudan.common.entity.RouteInfo", MethodName: "getStations"},
		{ClassName: "edu.fudan.common.entity.RouteInfo", MethodName: "getDistances"},
		{ClassName: "edu.fudan.common.entity.Assurance", MethodName: "Assurance"},
		{ClassName: "edu.fudan.common.entity.Assurance", MethodName: "Assurance"},
		{ClassName: "edu.fudan.common.entity.PaymentDifferenceInfo", MethodName: "PaymentDifferenceInfo"},
		{ClassName: "edu.fudan.common.entity.Route", MethodName: "Route"},
		{ClassName: "edu.fudan.common.entity.Route", MethodName: "Route"},
		{ClassName: "edu.fudan.common.entity.Route", MethodName: "Route"},
		{ClassName: "edu.fudan.common.entity.OrderSecurity", MethodName: "OrderSecurity"},
		{ClassName: "edu.fudan.common.entity.RoutePlanInfo", MethodName: "RoutePlanInfo"},
		{ClassName: "edu.fudan.common.entity.RoutePlanInfo", MethodName: "getStartStation"},
		{ClassName: "edu.fudan.common.entity.RoutePlanInfo", MethodName: "getEndStation"},
		{ClassName: "edu.fudan.common.entity.OrderAlterInfo", MethodName: "OrderAlterInfo"},
		{ClassName: "edu.fudan.common.entity.Station", MethodName: "Station"},
		{ClassName: "edu.fudan.common.entity.Station", MethodName: "setName"},
		{ClassName: "edu.fudan.common.entity.Station", MethodName: "Station"},
		{ClassName: "edu.fudan.common.entity.Station", MethodName: "Station"},
		{ClassName: "edu.fudan.common.entity.NotifyInfo", MethodName: "NotifyInfo"},
		{ClassName: "edu.fudan.common.entity.Seat", MethodName: "Seat"},
		{ClassName: "edu.fudan.common.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "edu.fudan.common.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "edu.fudan.common.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "edu.fudan.common.entity.Food", MethodName: "Food"},
		{ClassName: "edu.fudan.common.exception.BaseException", MethodName: "BaseException"},
		{ClassName: "edu.fudan.common.exception.BaseException", MethodName: "BaseException"},
		{ClassName: "edu.fudan.common.exception.TokenException", MethodName: "TokenException"},
	},
	"ts-execute-service": {
		{ClassName: "execute.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "execute.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "execute.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "execute.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "ticketExecute"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "ticketCollect"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "executeOrder"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "executeOrderOther"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "getOrderByIdFromOrder"},
		{ClassName: "execute.serivce.ExecuteServiceImpl", MethodName: "getOrderByIdFromOrderOther"},
		{ClassName: "execute.ExecuteApplication", MethodName: "main"},
		{ClassName: "execute.ExecuteApplication", MethodName: "restTemplate"},
		{ClassName: "execute.controller.ExecuteControlller", MethodName: "home"},
		{ClassName: "execute.controller.ExecuteControlller", MethodName: "executeTicket"},
		{ClassName: "execute.controller.ExecuteControlller", MethodName: "collectTicket"},
		{ClassName: "execute.controller.ExecuteControlllerTest", MethodName: "setUp"},
		{ClassName: "execute.controller.ExecuteControlllerTest", MethodName: "testHome"},
		{ClassName: "execute.controller.ExecuteControlllerTest", MethodName: "testExecuteTicket"},
		{ClassName: "execute.controller.ExecuteControlllerTest", MethodName: "testCollectTicket"},
		{ClassName: "execute.service.ExecuteServiceImplTest", MethodName: "setUp"},
		{ClassName: "execute.service.ExecuteServiceImplTest", MethodName: "testTicketExecute1"},
		{ClassName: "execute.service.ExecuteServiceImplTest", MethodName: "testTicketExecute2"},
		{ClassName: "execute.service.ExecuteServiceImplTest", MethodName: "testTicketCollect1"},
		{ClassName: "execute.service.ExecuteServiceImplTest", MethodName: "testTicketCollect2"},
	},
	"ts-order-other-service": {
		{ClassName: "other.OrderOtherApplication", MethodName: "main"},
		{ClassName: "other.OrderOtherApplication", MethodName: "restTemplate"},
		{ClassName: "other.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "other.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "other.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "other.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "home"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "getTicketListByDateAndTripId"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "createNewOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "addcreateNewOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "queryOrders"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "queryOrdersForRefresh"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "calculateSoldTicket"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "getOrderPrice"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "payOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "getOrderById"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "modifyOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "securityInfoCheck"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "saveOrderInfo"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "updateOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "deleteOrder"},
		{ClassName: "other.controller.OrderOtherController", MethodName: "findAllOrder"},
		{ClassName: "other.entity.QueryInfo", MethodName: "QueryInfo"},
		{ClassName: "other.entity.QueryInfo", MethodName: "enableTravelDateQuery"},
		{ClassName: "other.entity.QueryInfo", MethodName: "disableTravelDateQuery"},
		{ClassName: "other.entity.QueryInfo", MethodName: "enableBoughtDateQuery"},
		{ClassName: "other.entity.QueryInfo", MethodName: "disableBoughtDateQuery"},
		{ClassName: "other.entity.QueryInfo", MethodName: "enableStateQuery"},
		{ClassName: "other.entity.QueryInfo", MethodName: "disableStateQuery"},
		{ClassName: "other.entity.Order", MethodName: "Order"},
		{ClassName: "other.entity.Order", MethodName: "equals"},
		{ClassName: "other.entity.Order", MethodName: "hashCode"},
		{ClassName: "other.entity.OrderAlterInfo", MethodName: "OrderAlterInfo"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "getSoldTickets"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "findOrderById"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "create"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "initOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "alterOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "queryOrders"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "queryOrdersForRefresh"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "queryForStationId"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "saveChanges"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "cancelOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "queryAlreadySoldOrders"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "getAllOrders"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "modifyOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "getOrderPrice"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "payOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "getOrderById"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "checkSecurityAboutOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "deleteOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "addNewOrder"},
		{ClassName: "other.service.OrderOtherServiceImpl", MethodName: "updateOrder"},
		{ClassName: "other.init.InitData", MethodName: "run"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "setUp"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testHome"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testGetTicketListByDateAndTripId"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testCreateNewOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testAddCreateNewOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testQueryOrders"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testQueryOrdersForRefresh"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testCalculateSoldTicket"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testGetOrderPrice"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testPayOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testGetOrderById"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testModifyOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testSecurityInfoCheck"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testSaveOrderInfo"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testUpdateOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testDeleteOrder"},
		{ClassName: "other.controller.OrderOtherControllerTest", MethodName: "testFindAllOrder"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "setUp"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetSoldTickets1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetSoldTickets2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testFindOrderById1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testFindOrderById2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testInitOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testInitOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testAlterOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testAlterOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testQueryOrders"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testQueryOrdersForRefresh"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testQueryForStationId"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testSaveChanges1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testSaveChanges2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testCancelOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testCancelOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testQueryAlreadySoldOrders"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetAllOrders1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetAllOrders2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testModifyOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testModifyOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetOrderPrice1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetOrderPrice2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testPayOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testPayOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetOrderById1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testGetOrderById2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testCheckSecurityAboutOrder"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testDeleteOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testDeleteOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testAddNewOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testAddNewOrder2"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testUpdateOrder1"},
		{ClassName: "other.service.OrderOtherServiceImplTest", MethodName: "testUpdateOrder2"},
	},
	"ts-rebook-service": {
		{ClassName: "rebook.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "rebook.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "rebook.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "rebook.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "rebook.controller.RebookController", MethodName: "home"},
		{ClassName: "rebook.controller.RebookController", MethodName: "payDifference"},
		{ClassName: "rebook.controller.RebookController", MethodName: "rebook"},
		{ClassName: "rebook.RebookApplication", MethodName: "main"},
		{ClassName: "rebook.RebookApplication", MethodName: "restTemplate"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "rebook"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "payDifference"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "updateOrder"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "dipatchSeat"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "tripGD"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "checkTime"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "getTripAllDetailInformation"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "createOrder"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "updateOrder"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "deleteOrder"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "getOrderByRebookInfo"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "queryTrainTypeByName"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "getRouteByRouteId"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "payDifferentMoney"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "drawBackMoney"},
		{ClassName: "rebook.service.RebookServiceImpl", MethodName: "getAuthorizationHeadersFrom"},
		{ClassName: "rebook.controller.RebookControllerTest", MethodName: "setUp"},
		{ClassName: "rebook.controller.RebookControllerTest", MethodName: "testHome"},
		{ClassName: "rebook.controller.RebookControllerTest", MethodName: "testPayDifference"},
		{ClassName: "rebook.controller.RebookControllerTest", MethodName: "testRebook"},
		{ClassName: "rebook.service.RebookServiceImplTest", MethodName: "setUp"},
		{ClassName: "rebook.service.RebookServiceImplTest", MethodName: "testRebook"},
		{ClassName: "rebook.service.RebookServiceImplTest", MethodName: "testPayDifference"},
		{ClassName: "rebook.service.RebookServiceImplTest", MethodName: "testDipatchSeat"},
	},
	"ts-station-service": {
		{ClassName: "fdse.microservice.StationApplication", MethodName: "main"},
		{ClassName: "fdse.microservice.StationApplication", MethodName: "restTemplate"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "fdse.microservice.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "home"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "query"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "create"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "update"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "delete"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "queryForStationId"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "queryForIdBatch"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "queryById"},
		{ClassName: "fdse.microservice.controller.StationController", MethodName: "queryForNameBatch"},
		{ClassName: "fdse.microservice.entity.Station", MethodName: "Station"},
		{ClassName: "fdse.microservice.entity.Station", MethodName: "setName"},
		{ClassName: "fdse.microservice.entity.Station", MethodName: "Station"},
		{ClassName: "fdse.microservice.entity.Station", MethodName: "Station"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "create"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "exist"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "update"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "delete"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "query"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "queryForId"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "queryForIdBatch"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "queryById"},
		{ClassName: "fdse.microservice.service.StationServiceImpl", MethodName: "queryByIdBatch"},
		{ClassName: "fdse.microservice.init.InitData", MethodName: "run"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "setUp"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testHome"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testQuery"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testCreate"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testUpdate"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testDelete"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testQueryForStationId"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testQueryForIdBatch"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testQueryById"},
		{ClassName: "fdse.microservice.controller.StationControllerTest", MethodName: "testQueryForNameBatch"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "setUp"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testExist1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testExist2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testUpdate1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testUpdate2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQuery1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQuery2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryForId1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryForId2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryForIdBatch1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryForIdBatch2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryById1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryById2"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryByIdBatch1"},
		{ClassName: "fdse.microservice.service.StationServiceImplTest", MethodName: "testQueryByIdBatch2"},
	},
	"ts-user-service": {
		{ClassName: "user.UserApplication", MethodName: "main"},
		{ClassName: "user.UserApplication", MethodName: "restTemplate"},
		{ClassName: "user.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "user.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "user.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "user.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "user.controller.UserController", MethodName: "testHello"},
		{ClassName: "user.controller.UserController", MethodName: "getAllUser"},
		{ClassName: "user.controller.UserController", MethodName: "getUserByUserName"},
		{ClassName: "user.controller.UserController", MethodName: "getUserByUserId"},
		{ClassName: "user.controller.UserController", MethodName: "registerUser"},
		{ClassName: "user.controller.UserController", MethodName: "deleteUserById"},
		{ClassName: "user.controller.UserController", MethodName: "updateUser"},
		{ClassName: "user.entity.User", MethodName: "User"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "saveUser"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "createDefaultAuthUser"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "getAllUsers"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "findByUserName"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "findByUserId"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "deleteUser"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "updateUser"},
		{ClassName: "user.service.impl.UserServiceImpl", MethodName: "deleteUserAuth"},
		{ClassName: "user.init.InitUser", MethodName: "run"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "setUp"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testHome"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testGetAllUser"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testGetUserByUserName"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testGetUserByUserId"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testRegisterUser"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testDeleteUserById"},
		{ClassName: "user.controller.UserControllerTest", MethodName: "testUpdateUser"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "setUp"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testSaveUser"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testGetAllUsers1"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testGetAllUsers2"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testFindByUserName1"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testFindByUserName2"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testFindByUserId1"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testFindByUserId2"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testDeleteUser1"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testDeleteUser2"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testUpdateUser1"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testUpdateUser2"},
		{ClassName: "user.service.UserServiceImplTest", MethodName: "testDeleteUserAuth"},
	},
	"ts-admin-user-service": {
		{ClassName: "adminuser.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "adminuser.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "adminuser.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "adminuser.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "adminuser.controller.AdminUserController", MethodName: "home"},
		{ClassName: "adminuser.controller.AdminUserController", MethodName: "getAllUsers"},
		{ClassName: "adminuser.controller.AdminUserController", MethodName: "updateUser"},
		{ClassName: "adminuser.controller.AdminUserController", MethodName: "addUser"},
		{ClassName: "adminuser.controller.AdminUserController", MethodName: "deleteUser"},
		{ClassName: "adminuser.AdminUserApplication", MethodName: "main"},
		{ClassName: "adminuser.AdminUserApplication", MethodName: "restTemplate"},
		{ClassName: "adminuser.service.AdminUserServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "adminuser.service.AdminUserServiceImpl", MethodName: "getAllUsers"},
		{ClassName: "adminuser.service.AdminUserServiceImpl", MethodName: "deleteUser"},
		{ClassName: "adminuser.service.AdminUserServiceImpl", MethodName: "updateUser"},
		{ClassName: "adminuser.service.AdminUserServiceImpl", MethodName: "addUser"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "setUp"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "testHome"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "testGetAllUsers"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "testUpdateUser"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "testAddUser"},
		{ClassName: "adminuser.controller.AdminUserControllerTest", MethodName: "testDeleteUser"},
		{ClassName: "adminuser.service.AdminUserServiceImplTest", MethodName: "setUp"},
		{ClassName: "adminuser.service.AdminUserServiceImplTest", MethodName: "testGetAllUsers"},
		{ClassName: "adminuser.service.AdminUserServiceImplTest", MethodName: "testDeleteUser"},
		{ClassName: "adminuser.service.AdminUserServiceImplTest", MethodName: "testUpdateUser"},
		{ClassName: "adminuser.service.AdminUserServiceImplTest", MethodName: "testAddUser"},
	},
	"ts-config-service": {
		{ClassName: "config.controller.ConfigController", MethodName: "home"},
		{ClassName: "config.controller.ConfigController", MethodName: "queryAll"},
		{ClassName: "config.controller.ConfigController", MethodName: "createConfig"},
		{ClassName: "config.controller.ConfigController", MethodName: "updateConfig"},
		{ClassName: "config.controller.ConfigController", MethodName: "deleteConfig"},
		{ClassName: "config.controller.ConfigController", MethodName: "retrieve"},
		{ClassName: "config.entity.Config", MethodName: "Config"},
		{ClassName: "config.entity.Config", MethodName: "Config"},
		{ClassName: "config.ConfigApplication", MethodName: "main"},
		{ClassName: "config.ConfigApplication", MethodName: "restTemplate"},
		{ClassName: "config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "config.SecurityConfig", MethodName: "configure"},
		{ClassName: "config.service.ConfigServiceImpl", MethodName: "create"},
		{ClassName: "config.service.ConfigServiceImpl", MethodName: "update"},
		{ClassName: "config.service.ConfigServiceImpl", MethodName: "query"},
		{ClassName: "config.service.ConfigServiceImpl", MethodName: "delete"},
		{ClassName: "config.service.ConfigServiceImpl", MethodName: "queryAll"},
		{ClassName: "config.init.InitData", MethodName: "run"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "setUp"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testHome"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testQueryAll"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testCreateConfig"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testUpdateConfig"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testDeleteConfig"},
		{ClassName: "config.controller.ConfigControllerTest", MethodName: "testRetrieve"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "setUp"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testUpdate1"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testUpdate2"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testQuery1"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testQuery2"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testQueryAll1"},
		{ClassName: "config.service.ConfigServiceImplTest", MethodName: "testQueryAll2"},
	},
	"ts-food-delivery-service": {
		{ClassName: "food_delivery.FoodDeliveryApplication", MethodName: "main"},
		{ClassName: "food_delivery.FoodDeliveryApplication", MethodName: "restTemplate"},
		{ClassName: "food_delivery.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "food_delivery.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "food_delivery.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "food_delivery.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "home"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "createFoodDeliveryOrder"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "deleteFoodDeliveryOrder"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "getFoodDeliveryOrderById"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "getAllFoodDeliveryOrders"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "getFoodDeliveryOrderByStoreId"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "updateTripId"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "updateSeatNo"},
		{ClassName: "food_delivery.controller.FoodDeliveryController", MethodName: "updateDeliveryTime"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "createFoodDeliveryOrder"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "deleteFoodDeliveryOrder"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "getFoodDeliveryOrderById"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "getAllFoodDeliveryOrders"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "getFoodDeliveryOrderByStoreId"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "updateTripId"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "updateSeatNo"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImpl", MethodName: "updateDeliveryTime"},
		{ClassName: "food_delivery.init.InitData", MethodName: "run"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "setUp"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testHome"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testCreateFoodDeliveryOrder"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testDeleteFoodDeliveryOrder"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testGetFoodDeliveryOrderById"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testGetFoodDeliveryOrderByStoreId"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testGetAllFoodDeliveryOrders"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testUpdateTripId"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testUpdateSeatNo"},
		{ClassName: "food_delivery.controller.FoodDeliveryControllerTest", MethodName: "testUpdateDeliveryTime"},
		{ClassName: "food_delivery.service.FoodDeliveryServiceImplTest", MethodName: "setUp"},
	},
	"ts-order-service": {
		{ClassName: "order.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "order.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "order.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "order.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "order.controller.OrderController", MethodName: "home"},
		{ClassName: "order.controller.OrderController", MethodName: "getTicketListByDateAndTripId"},
		{ClassName: "order.controller.OrderController", MethodName: "createNewOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "addcreateNewOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "queryOrders"},
		{ClassName: "order.controller.OrderController", MethodName: "queryOrdersForRefresh"},
		{ClassName: "order.controller.OrderController", MethodName: "calculateSoldTicket"},
		{ClassName: "order.controller.OrderController", MethodName: "getOrderPrice"},
		{ClassName: "order.controller.OrderController", MethodName: "payOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "getOrderById"},
		{ClassName: "order.controller.OrderController", MethodName: "modifyOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "securityInfoCheck"},
		{ClassName: "order.controller.OrderController", MethodName: "saveOrderInfo"},
		{ClassName: "order.controller.OrderController", MethodName: "updateOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "deleteOrder"},
		{ClassName: "order.controller.OrderController", MethodName: "findAllOrder"},
		{ClassName: "order.entity.OrderInfo", MethodName: "OrderInfo"},
		{ClassName: "order.entity.OrderInfo", MethodName: "getLoginId"},
		{ClassName: "order.entity.OrderInfo", MethodName: "setLoginId"},
		{ClassName: "order.entity.OrderInfo", MethodName: "getState"},
		{ClassName: "order.entity.OrderInfo", MethodName: "enableTravelDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "disableTravelDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "enableBoughtDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "disableBoughtDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "enableStateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "disableStateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "isEnableTravelDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "isEnableBoughtDateQuery"},
		{ClassName: "order.entity.OrderInfo", MethodName: "isEnableStateQuery"},
		{ClassName: "order.entity.Order", MethodName: "Order"},
		{ClassName: "order.entity.Order", MethodName: "equals"},
		{ClassName: "order.entity.Order", MethodName: "hashCode"},
		{ClassName: "order.entity.OrderAlterInfo", MethodName: "OrderAlterInfo"},
		{ClassName: "order.OrderApplication", MethodName: "main"},
		{ClassName: "order.OrderApplication", MethodName: "restTemplate"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "getSoldTickets"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "findOrderById"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "create"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "checkDuplicateOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "alterOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "queryOrders"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "findOrdersWithFilters"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "queryOrdersForRefresh"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "queryForStationId"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "saveChanges"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "cancelOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "queryAlreadySoldOrders"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "getAllOrders"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "modifyOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "getOrderPrice"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "payOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "getOrderById"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "initOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "checkSecurityAboutOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "countOrdersAfterTime"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "countValidOrders"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "deleteOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "addNewOrder"},
		{ClassName: "order.service.OrderServiceImpl", MethodName: "updateOrder"},
		{ClassName: "order.init.InitData", MethodName: "run"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "setUp"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testHome"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testGetTicketListByDateAndTripId"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testCreateNewOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testAddCreateNewOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testQueryOrders"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testQueryOrdersForRefresh"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testCalculateSoldTicket"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testGetOrderPrice"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testPayOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testGetOrderById"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testModifyOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testSecurityInfoCheck"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testSaveOrderInfo"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testUpdateOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testDeleteOrder"},
		{ClassName: "order.controller.OrderControllerTest", MethodName: "testFindAllOrder"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "setUp"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetSoldTickets1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetSoldTickets2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testFindOrderById1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testFindOrderById2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testInitOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testInitOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testAlterOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testAlterOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testQueryOrders"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testQueryOrdersForRefresh"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testQueryForStationId"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testSaveChanges1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testSaveChanges2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testCancelOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testCancelOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testQueryAlreadySoldOrders"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetAllOrders1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetAllOrders2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testModifyOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testModifyOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetOrderPrice1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetOrderPrice2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testPayOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testPayOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetOrderById1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testGetOrderById2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testCheckSecurityAboutOrder"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testDeleteOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testDeleteOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testAddNewOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testAddNewOrder2"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testUpdateOrder1"},
		{ClassName: "order.service.OrderServiceImplTest", MethodName: "testUpdateOrder2"},
	},
	"ts-route-plan-service": {
		{ClassName: "plan.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "plan.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "plan.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "plan.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "plan.RoutePlanApplication", MethodName: "main"},
		{ClassName: "plan.RoutePlanApplication", MethodName: "restTemplate"},
		{ClassName: "plan.controller.RoutePlanController", MethodName: "home"},
		{ClassName: "plan.controller.RoutePlanController", MethodName: "getCheapestRoutes"},
		{ClassName: "plan.controller.RoutePlanController", MethodName: "getQuickestRoutes"},
		{ClassName: "plan.controller.RoutePlanController", MethodName: "getMinStopStations"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "searchCheapestResult"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "searchQuickestResult"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "searchMinStopStations"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "getRouteByRouteId"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "getTripFromHighSpeedTravelServive"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "getTripFromNormalTrainTravelService"},
		{ClassName: "plan.service.RoutePlanServiceImpl", MethodName: "getStationList"},
		{ClassName: "plan.controller.RoutePlanControllerTest", MethodName: "setUp"},
		{ClassName: "plan.controller.RoutePlanControllerTest", MethodName: "testHome"},
		{ClassName: "plan.controller.RoutePlanControllerTest", MethodName: "testGetCheapestRoutes"},
		{ClassName: "plan.controller.RoutePlanControllerTest", MethodName: "testGetQuickestRoutes"},
		{ClassName: "plan.controller.RoutePlanControllerTest", MethodName: "testGetMinStopStations"},
		{ClassName: "plan.service.RoutePlanServiceImplTest", MethodName: "setUp"},
		{ClassName: "plan.service.RoutePlanServiceImplTest", MethodName: "testSearchCheapestResult"},
		{ClassName: "plan.service.RoutePlanServiceImplTest", MethodName: "testSearchQuickestResult"},
		{ClassName: "plan.service.RoutePlanServiceImplTest", MethodName: "testSearchMinStopStations"},
	},
	"ts-train-food-service": {
		{ClassName: "trainFood.TrainFoodApplication", MethodName: "main"},
		{ClassName: "trainFood.TrainFoodApplication", MethodName: "restTemplate"},
		{ClassName: "trainFood.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "trainFood.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "trainFood.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "trainFood.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "trainFood.controller.TrainFoodController", MethodName: "home"},
		{ClassName: "trainFood.controller.TrainFoodController", MethodName: "getAllTrainFood"},
		{ClassName: "trainFood.controller.TrainFoodController", MethodName: "getTrainFoodOfTrip"},
		{ClassName: "trainFood.entity.TrainFood", MethodName: "TrainFood"},
		{ClassName: "trainFood.service.TrainFoodServiceImpl", MethodName: "createTrainFood"},
		{ClassName: "trainFood.service.TrainFoodServiceImpl", MethodName: "listTrainFood"},
		{ClassName: "trainFood.service.TrainFoodServiceImpl", MethodName: "listTrainFoodByTripId"},
		{ClassName: "trainFood.init.InitData", MethodName: "run"},
		{ClassName: "trainFood.init.InitData", MethodName: "toFoodList"},
	},
	"ts-verification-code-service": {
		{ClassName: "verifycode.util.CookieUtil", MethodName: "CookieUtil"},
		{ClassName: "verifycode.util.CookieUtil", MethodName: "addCookie"},
		{ClassName: "verifycode.util.CookieUtil", MethodName: "getCookieByName"},
		{ClassName: "verifycode.util.CookieUtil", MethodName: "readCookieMap"},
		{ClassName: "verifycode.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "verifycode.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "verifycode.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "verifycode.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "verifycode.controller.VerifyCodeController", MethodName: "imageCode"},
		{ClassName: "verifycode.controller.VerifyCodeController", MethodName: "verifyCode"},
		{ClassName: "verifycode.VerifyCodeApplication", MethodName: "main"},
		{ClassName: "verifycode.VerifyCodeApplication", MethodName: "restTemplate"},
		{ClassName: "verifycode.service.impl.VerifyCodeServiceImpl", MethodName: "getImageCode"},
		{ClassName: "verifycode.service.impl.VerifyCodeServiceImpl", MethodName: "verifyCode"},
		{ClassName: "verifycode.service.impl.VerifyCodeServiceImpl", MethodName: "getRandColor"},
		{ClassName: "verifycode.controller.VerifyCodeControllerTest", MethodName: "setUp"},
		{ClassName: "verifycode.controller.VerifyCodeControllerTest", MethodName: "testImageCode"},
		{ClassName: "verifycode.controller.VerifyCodeControllerTest", MethodName: "testVerifyCode"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getAuthType"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getCookies"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getDateHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeaders"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeaderNames"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getIntHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getMethod"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getPathInfo"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getPathTranslated"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getContextPath"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getQueryString"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRemoteUser"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isUserInRole"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getUserPrincipal"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRequestedSessionId"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRequestURI"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRequestURL"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getServletPath"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getSession"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getSession"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "changeSessionId"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isRequestedSessionIdValid"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isRequestedSessionIdFromCookie"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isRequestedSessionIdFromURL"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isRequestedSessionIdFromUrl"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "authenticate"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "login"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "logout"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getParts"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getPart"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "upgrade"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getAttribute"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getAttributeNames"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getCharacterEncoding"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setCharacterEncoding"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getContentLength"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getContentLengthLong"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getContentType"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getInputStream"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getParameter"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getParameterNames"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getParameterValues"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getParameterMap"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getProtocol"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getScheme"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getServerName"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getServerPort"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getReader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRemoteAddr"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRemoteHost"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setAttribute"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "removeAttribute"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocale"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocales"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isSecure"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRequestDispatcher"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRealPath"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getRemotePort"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocalName"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocalAddr"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocalPort"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getServletContext"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "startAsync"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "startAsync"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isAsyncStarted"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isAsyncSupported"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getAsyncContext"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getDispatcherType"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "addCookie"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "containsHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "encodeURL"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "encodeRedirectURL"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "encodeUrl"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "encodeRedirectUrl"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "sendError"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "sendError"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "sendRedirect"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setDateHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "addDateHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "addHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setIntHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "addIntHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setStatus"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setStatus"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getStatus"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeader"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeaders"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getHeaderNames"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getCharacterEncoding"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getContentType"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getOutputStream"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getWriter"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setCharacterEncoding"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setContentLength"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setContentLengthLong"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setContentType"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setBufferSize"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getBufferSize"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "flushBuffer"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "resetBuffer"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "isCommitted"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "reset"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "setLocale"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "getLocale"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "testGetImageCode"},
		{ClassName: "verifycode.service.VerifyCodeServiceImplTest", MethodName: "testVerifyCode"},
	},
	"ts-assurance-service": {
		{ClassName: "assurance.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "assurance.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "assurance.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "assurance.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "home"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "getAllAssurances"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "getAllAssuranceType"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "deleteAssurance"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "deleteAssuranceByOrderId"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "modifyAssurance"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "createNewAssurance"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "getAssuranceById"},
		{ClassName: "assurance.controller.AssuranceController", MethodName: "findAssuranceByOrderId"},
		{ClassName: "assurance.entity.Assurance", MethodName: "Assurance"},
		{ClassName: "assurance.entity.Assurance", MethodName: "Assurance"},
		{ClassName: "assurance.entity.PlainAssurance", MethodName: "PlainAssurance"},
		{ClassName: "assurance.AssuranceApplication", MethodName: "main"},
		{ClassName: "assurance.AssuranceApplication", MethodName: "restTemplate"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "findAssuranceById"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "findAssuranceByOrderId"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "create"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "deleteById"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "deleteByOrderId"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "modify"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "getAllAssurances"},
		{ClassName: "assurance.service.AssuranceServiceImpl", MethodName: "getAllAssuranceTypes"},
		{ClassName: "assurance.init.InitData", MethodName: "run"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "setUp"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testHome"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testGetAllAssurances"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testGetAllAssuranceType"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testDeleteAssurance"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testDeleteAssuranceByOrderId"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testModifyAssurance"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testCreateNewAssurance"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testGetAssuranceById"},
		{ClassName: "assurance.controller.AssuranceControllerTest", MethodName: "testFindAssuranceByOrderId"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "setUp"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testFindAssuranceById1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testFindAssuranceById2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testFindAssuranceByOrderId1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testFindAssuranceByOrderId2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "tesCreate2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testCreate3"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testDeleteById1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testDeleteById2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testDeleteByOrderId1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testDeleteByOrderId2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testModify2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testModify3"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testGetAllAssurances1"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testGetAllAssurances2"},
		{ClassName: "assurance.service.AssuranceServiceImplTest", MethodName: "testGetAllAssuranceTypes"},
	},
	"ts-consign-price-service": {
		{ClassName: "consignprice.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "consignprice.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "consignprice.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "consignprice.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "consignprice.controller.ConsignPriceController", MethodName: "home"},
		{ClassName: "consignprice.controller.ConsignPriceController", MethodName: "getPriceByWeightAndRegion"},
		{ClassName: "consignprice.controller.ConsignPriceController", MethodName: "getPriceInfo"},
		{ClassName: "consignprice.controller.ConsignPriceController", MethodName: "getPriceConfig"},
		{ClassName: "consignprice.controller.ConsignPriceController", MethodName: "modifyPriceConfig"},
		{ClassName: "consignprice.entity.ConsignPrice", MethodName: "ConsignPrice"},
		{ClassName: "consignprice.ConsignPriceApplication", MethodName: "main"},
		{ClassName: "consignprice.ConsignPriceApplication", MethodName: "restTemplate"},
		{ClassName: "consignprice.service.ConsignPriceServiceImpl", MethodName: "getPriceByWeightAndRegion"},
		{ClassName: "consignprice.service.ConsignPriceServiceImpl", MethodName: "queryPriceInformation"},
		{ClassName: "consignprice.service.ConsignPriceServiceImpl", MethodName: "createAndModifyPrice"},
		{ClassName: "consignprice.service.ConsignPriceServiceImpl", MethodName: "getPriceConfig"},
		{ClassName: "consignprice.init.InitData", MethodName: "run"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "setUp"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "testHome"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "testGetPriceByWeightAndRegion"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "testGetPriceInfo"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "testGetPriceConfig"},
		{ClassName: "consignprice.controller.ConsignPriceControllerTest", MethodName: "testModifyPriceConfig"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "setUp"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testGetPriceByWeightAndRegion1"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testGetPriceByWeightAndRegion2"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testGetPriceByWeightAndRegion3"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testQueryPriceInformation"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testCreateAndModifyPrice1"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testCreateAndModifyPrice2"},
		{ClassName: "consignprice.service.ConsignPriceServiceImplTest", MethodName: "testGetPriceConfig"},
	},
	"ts-food-service": {
		{ClassName: "foodsearch.FoodApplication", MethodName: "main"},
		{ClassName: "foodsearch.FoodApplication", MethodName: "restTemplate"},
		{ClassName: "foodsearch.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "foodsearch.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "foodsearch.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "foodsearch.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "foodsearch.config.Queues", MethodName: "emailQueue"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "home"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "test_send_delivery"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "findAllFoodOrder"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "createFoodOrder"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "createFoodBatches"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "updateFoodOrder"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "deleteFoodOrder"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "findFoodOrderByOrderId"},
		{ClassName: "foodsearch.controller.FoodController", MethodName: "getAllFood"},
		{ClassName: "foodsearch.entity.FoodOrder", MethodName: "FoodOrder"},
		{ClassName: "foodsearch.entity.AllTripFood", MethodName: "AllTripFood"},
		{ClassName: "foodsearch.entity.Delivery", MethodName: "Delivery"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "getServiceUrl"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "createFoodOrdersInBatch"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "createFoodOrder"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "deleteFoodOrder"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "findAllFoodOrder"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "updateFoodOrder"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "findByOrderId"},
		{ClassName: "foodsearch.service.FoodServiceImpl", MethodName: "getAllFood"},
		{ClassName: "foodsearch.mq.RabbitSend", MethodName: "send"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "setUp"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testHome"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testFindAllFoodOrder"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testCreateFoodOrder"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testUpdateFoodOrder"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testDeleteFoodOrder"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testFindFoodOrderByOrderId"},
		{ClassName: "adminorder.controller.FoodControllerTest", MethodName: "testGetAllFood"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "setUp"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testCreateFoodOrder1"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testCreateFoodOrder2"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testDeleteFoodOrder1"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testDeleteFoodOrder2"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testFindAllFoodOrder1"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testFindAllFoodOrder2"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testUpdateFoodOrder1"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testUpdateFoodOrder2"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testFindByOrderId1"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testFindByOrderId2"},
		{ClassName: "adminorder.service.FoodServiceImplTest", MethodName: "testGetAllFood"},
	},
	"ts-payment-service": {
		{ClassName: "com.trainticket.PaymentApplication", MethodName: "main"},
		{ClassName: "com.trainticket.PaymentApplication", MethodName: "restTemplate"},
		{ClassName: "com.trainticket.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "com.trainticket.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "com.trainticket.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "com.trainticket.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "com.trainticket.controller.PaymentController", MethodName: "home"},
		{ClassName: "com.trainticket.controller.PaymentController", MethodName: "pay"},
		{ClassName: "com.trainticket.controller.PaymentController", MethodName: "addMoney"},
		{ClassName: "com.trainticket.controller.PaymentController", MethodName: "query"},
		{ClassName: "com.trainticket.entity.Payment", MethodName: "Payment"},
		{ClassName: "com.trainticket.service.PaymentServiceImpl", MethodName: "pay"},
		{ClassName: "com.trainticket.service.PaymentServiceImpl", MethodName: "addMoney"},
		{ClassName: "com.trainticket.service.PaymentServiceImpl", MethodName: "query"},
		{ClassName: "com.trainticket.service.PaymentServiceImpl", MethodName: "initPayment"},
		{ClassName: "com.trainticket.init.InitData", MethodName: "run"},
		{ClassName: "com.trainticket.controller.PaymentControllerTest", MethodName: "setUp"},
		{ClassName: "com.trainticket.controller.PaymentControllerTest", MethodName: "testHome"},
		{ClassName: "com.trainticket.controller.PaymentControllerTest", MethodName: "testPay"},
		{ClassName: "com.trainticket.controller.PaymentControllerTest", MethodName: "testAddMoney"},
		{ClassName: "com.trainticket.controller.PaymentControllerTest", MethodName: "testQuery"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "setUp"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testPay1"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testPay2"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testAddMoney"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testQuery1"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testQuery2"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testInitPayment1"},
		{ClassName: "com.trainticket.service.PaymentServiceImplTest", MethodName: "testInitPayment2"},
	},
	"ts-route-service": {
		{ClassName: "route.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "route.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "route.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "route.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "route.controller.RouteController", MethodName: "home"},
		{ClassName: "route.controller.RouteController", MethodName: "createAndModifyRoute"},
		{ClassName: "route.controller.RouteController", MethodName: "deleteRoute"},
		{ClassName: "route.controller.RouteController", MethodName: "queryById"},
		{ClassName: "route.controller.RouteController", MethodName: "queryByIds"},
		{ClassName: "route.controller.RouteController", MethodName: "queryAll"},
		{ClassName: "route.controller.RouteController", MethodName: "queryByStartAndTerminal"},
		{ClassName: "route.entity.Route", MethodName: "Route"},
		{ClassName: "route.entity.Route", MethodName: "Route"},
		{ClassName: "route.entity.Route", MethodName: "Route"},
		{ClassName: "route.RouteApplication", MethodName: "main"},
		{ClassName: "route.RouteApplication", MethodName: "restTemplate"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "createAndModify"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "deleteRoute"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "getRouteById"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "getRouteByIds"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "getRouteByStartAndEnd"},
		{ClassName: "route.service.RouteServiceImpl", MethodName: "getAllRoutes"},
		{ClassName: "route.init.InitData", MethodName: "run"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "setUp"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testHome"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testCreateAndModifyRoute"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testDeleteRoute"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testQueryById"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testQueryAll"},
		{ClassName: "route.controller.RouteControllerTest", MethodName: "testQueryByStartAndTerminal"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "setUp"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testCreateAndModify1"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testCreateAndModify2"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testCreateAndModify3"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testDeleteRoute1"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testDeleteRoute2"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetRouteById1"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetRouteById2"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetRouteByStartAndTerminal1"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetRouteByStartAndTerminal2"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetAllRoutes1"},
		{ClassName: "route.service.RouteServiceImplTest", MethodName: "testGetAllRoutes2"},
	},
	"ts-train-service": {
		{ClassName: "train.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "train.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "train.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "train.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "train.controller.TrainController", MethodName: "home"},
		{ClassName: "train.controller.TrainController", MethodName: "create"},
		{ClassName: "train.controller.TrainController", MethodName: "retrieve"},
		{ClassName: "train.controller.TrainController", MethodName: "retrieveByName"},
		{ClassName: "train.controller.TrainController", MethodName: "retrieveByName"},
		{ClassName: "train.controller.TrainController", MethodName: "update"},
		{ClassName: "train.controller.TrainController", MethodName: "delete"},
		{ClassName: "train.controller.TrainController", MethodName: "query"},
		{ClassName: "train.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "train.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "train.entity.TrainType", MethodName: "TrainType"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "create"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "retrieve"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "retrieveByName"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "retrieveByNames"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "update"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "delete"},
		{ClassName: "train.service.TrainServiceImpl", MethodName: "query"},
		{ClassName: "train.TrainApplication", MethodName: "main"},
		{ClassName: "train.TrainApplication", MethodName: "restTemplate"},
		{ClassName: "train.init.InitData", MethodName: "run"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "setUp"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testHome"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testCreate1"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testCreate2"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testRetrieve1"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testRetrieve2"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testUpdate1"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testUpdate2"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testDelete1"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testDelete2"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testQuery1"},
		{ClassName: "train.controller.TrainControllerTest", MethodName: "testQuery2"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "setUp"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testCreate1"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testCreate2"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testRetrieve1"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testRetrieve2"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testUpdate1"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testUpdate2"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testDelete1"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testDelete2"},
		{ClassName: "train.service.TrainServiceImplTest", MethodName: "testQuery"},
	},
	"ts-wait-order-service": {
		{ClassName: "waitorder.config.SecurityConfig", MethodName: "passwordEncoder"},
		{ClassName: "waitorder.config.SecurityConfig", MethodName: "corsConfigurer"},
		{ClassName: "waitorder.config.SecurityConfig", MethodName: "addCorsMappings"},
		{ClassName: "waitorder.config.SecurityConfig", MethodName: "configure"},
		{ClassName: "waitorder.WaitOrderApplication", MethodName: "main"},
		{ClassName: "waitorder.WaitOrderApplication", MethodName: "restTemplate"},
		{ClassName: "waitorder.controller.WaitListOrderController", MethodName: "home"},
		{ClassName: "waitorder.controller.WaitListOrderController", MethodName: "createNewOrder"},
		{ClassName: "waitorder.controller.WaitListOrderController", MethodName: "getAllOrders"},
		{ClassName: "waitorder.controller.WaitListOrderController", MethodName: "getWaitListOrders"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "WaitListOrder"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "hashCode"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "getCreatedTime"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "getTravelTime"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "getWaitUtilTime"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "setCreatedTime"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "setTravelTime"},
		{ClassName: "waitorder.entity.WaitListOrder", MethodName: "setWaitUntilTime"},
		{ClassName: "waitorder.entity.WaitListOrderVO", MethodName: "getDate"},
		{ClassName: "waitorder.entity.WaitListOrderVO", MethodName: "setDate"},
		{ClassName: "waitorder.utils.PollThread", MethodName: "PollThread"},
		{ClassName: "waitorder.utils.PollThread", MethodName: "run"},
		{ClassName: "waitorder.utils.PollThread", MethodName: "getServiceUrl"},
		{ClassName: "waitorder.utils.PollThread", MethodName: "doPreserve"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "findOrderById"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "create"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "getAllOrders"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "getAllWaitListOrders"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "updateOrder"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "modifyWaitListOrderStatus"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "saveNewOrder"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "WaitListOrderExist"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImpl", MethodName: "triggerThread"},
		{ClassName: "waitorder.WaitOrderApplicationTests", MethodName: "contextLoads"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImplTest", MethodName: "setUp"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImplTest", MethodName: "findOrderById"},
		{ClassName: "waitorder.service.Impl.WaitListOrderServiceImplTest", MethodName: "getAllOrders"},
	},
}

// GetClassMethodsByService returns all class-method pairs for a service
func GetClassMethodsByService(serviceName string) []ClassMethodEntry {
	if methods, exists := ServiceClassMethods[serviceName]; exists {
		return methods
	}
	return []ClassMethodEntry{}
}

// GetAllServices returns a list of all available service names
func GetAllServices() []string {
	services := make([]string, 0, len(ServiceClassMethods))
	for service := range ServiceClassMethods {
		services = append(services, service)
	}
	return services
}
